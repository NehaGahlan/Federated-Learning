# -*- coding: utf-8 -*-
"""FedPer_code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rIm1fOrSih4ZiZN8Xlwi6L5AMLnyVVZT

### Client side code
"""

!pip install tensorflow_federated==0.19.0

import tensorflow_federated as tff
print(tff.__version__)

import tensorflow as tf
import tensorflow_federated as tff

from tensorflow.keras import layers

# Define the personalized layers for each client
personalized_layers = tf.keras.Sequential([
    layers.Dense(32, activation='relu'),
    layers.Dropout(0.2),
    layers.Dense(64, activation='softmax')
])

# Define the model_fn for each client, which combines the personalized layers with the global model
def model_fn():
    base_model = tff.learning.from_keras_model(
        tf.keras.Sequential([
            layers.Dense(128, activation='relu', input_shape=(168,)),
            layers.Dropout(0.2),
            layers.Dense(64, activation='relu'),
            layers.Dropout(0.2),
        ]),
        loss=tf.keras.losses.SparseCategoricalCrossentropy(),
        input_spec=tf.TensorSpec(shape=(None, 168), dtype=tf.float32))
    return tff.learning.combined_model.ConcreteCombiningModel(base_model, personalized_layers)

# Define the Federated Averaging algorithm for each client
iterative_process = tff.learning.build_federated_averaging_process(
    model_fn,
    client_optimizer_fn=lambda: tf.keras.optimizers.Adam(learning_rate=0.01),
    server_optimizer_fn=lambda: tf.keras.optimizers.Adam(learning_rate=0.05))

# Train the model on local data
state = iterative_process.initialize()
for i in range(50):
    state, metrics = iterative_process.next(state, client_data)
    print('Round {:2d}, loss={:.3f}, accuracy={:.3f}'.format(i, metrics.loss, metrics.accuracy))

"""### Server side code"""

import tensorflow as tf
import tensorflow_federated as tff

# Define the global model by using the same base model as in the client-side code
base_model = tff.learning.from_keras_model(
    tf.keras.Sequential([
        layers.Dense(128, activation='relu', input_shape=(168,)),
        layers.Dense(64, activation='relu')
    ]),
    input_spec=tf.TensorSpec(shape=(None, 168), dtype=tf.float32))

# Define the Federated Averaging algorithm on the server-side
fed_avg = tff.learning.build_federated_averaging_process(
    model_fn=lambda: tff.learning.combined_model.ConcreteCombiningModel(base_model),
    client_optimizer_fn=lambda: tf.keras.optimizers.Adam(learning_rate=0.01),
    server_optimizer_fn=lambda: tf.keras.optimizers.Adam(learning_rate=0.05))

# Train the global model using FedAvg on the federated dataset
state = fed_avg.initialize()
for round_num in range(50):
    state, metrics = fed_avg.next(state, federated_dataset)
    print('Round {:2d}, loss={:.3f}, accuracy={:.3f}'.format(round_num, metrics.loss, metrics.accuracy))